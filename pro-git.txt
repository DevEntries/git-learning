# pro git

## 1. 起步

**集中化的版本控制系统**
解决不同系统上的开发者协同工作。

最显而易见的缺点是中央服务器的单点故障。
如果中央服务器宕机一小时，那么这一个小时内，谁都无法提交更新，也就无法协同工作。
如果中心数据库所在磁盘发生损坏，有没有做备份，你将丢失所有数据。

**分布式版本控制系统**
客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。
每一次的克隆操作，实际上都是一次对代码仓库的完整备份。

更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。

对**非线性开发模式**的强力支持（允许成千上万个**并行开发**的分支）。

**直接记录快照 而非差异比较**
 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。这类系统（CVS、Subversion等）将它们保存的信息看作是**一组基本文件和每个文件随时间逐步累积的差异**。**基本文件和随时间逐步累积的差异**

Git更像是把数据看作是对小型文件系统的一组快照。每次你提交更新，或在Git中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git对待数据更像是一个**快照流**。**文件快照和这个快照的索引**

**Git 保证完整性**
Git用以计算和校验的机制叫做**SHA-1散列**（hash，哈希）。